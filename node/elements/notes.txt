next: finish world clock app

upg:

	nimble --bootstrap (or --no-bootstrap) .. if folder empty?  (global config possible?)

	system to watch for changes to source files and run nimble build on changes

	bundle live-server? https://www.npmjs.com/package/live-server -- run via api.

	(optionally: nimble --bootstrap)  .. generates example framework in current directly.. (ask if dir isn't empty)

	upg: nimble --example  .. generates example app

	upg: copy media to ./build/media/	//upg: option to include media to this.media['name'] as dataurl and or option as blob. into bundle.js or other options? (lib hook to install to indexedDB?)
		- but for now use a local ../media folder?

	upg: bundle bundle.js into local index.html file.

	upg: support for service worker? (perhaps a dual app? .. installer/loader app, and loaded updateable indexedDB app?)

	upg: add build path option (so not default .build)

	upg: nimble -v .. display current version (taken from package.json? .. or a designed way?)

	upg: nimble --bootstrap-list   .. list possable bootstrap options (how can we get tab to do this?)

	upg: nimble -bootstrap examples .. expl look for examples that are very direct to nimble (less it's own code needed)

	upg: nimble --bootstrap world-clocks .. to warn/manage if already have files in dest path

	upg?: should we make the app in an app/ folder.. this way could have multple within the same?  (or why not just do that on your own and nimble from each one?)

	upg: npm init / install automatically programattically if none found?

	upg: bootstrap example how to use npm packages (moment)





nimble-node-element
	- add propery change and such events accessable to created.
	- add hook for decendant setting
	- upg: auto dependentcies so can nest/reuse.

perhaps nimble node elements should be it's own project (instead of all the node versions) .. upg: split nimble versions to single target projects? (how to do that cascade reference like?) .. perhaps only in npm have it seperate?
